<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AlumNet - Chat</title>
  <link rel="stylesheet" href="/css/output.css" />
  <script src="http://localhost:5000/socket.io/socket.io.js"></script>
</head>

<body class="h-screen bg-gray-100 font-sans">
  <%- include("partials/header.ejs") %>

    <div class="flex h-full">
      <!-- Contact List -->
      <div class="w-1/4 bg-white border-r overflow-y-auto p-4">
        <h2 class="text-2xl font-semibold mb-4">Chats</h2>
        <ul id="contactList" class="space-y-2">
          <% users.forEach(u=> { %>
            <li class="p-2 rounded hover:bg-gray-100 cursor-pointer" data-user-id="<%= u.user_id %>"
              data-user="<%= u.username %>">
              <div class="font-medium text-gray-800">
                <%= u.username %>
              </div>
              <div class="text-sm text-gray-500">
                <%= u.job_title || 'No title' %>
              </div>
            </li>
            <% }) %>
        </ul>
      </div>

      <!-- Chat Panel -->
      <div class="w-3/4 flex flex-col">
        <div class="bg-white px-6 py-4 shadow border-b">
          <h2 id="chatHeader" class="text-xl font-bold text-gray-800">Select a contact to start chatting</h2>
        </div>
        <div class="relative">
          <div id="chatBox" class="flex-1 overflow-y-auto p-4 space-y-2 bg-gray-50"></div>

          <!-- Message Input -->

          <div id="message-input-container" class="hidden border-t bg-white p-4 flex items-center gap-2 sticky bottom-0">
            <input id="messageInput" type="text" placeholder="Type a message..."
              class="flex-1 p-2 border rounded focus:outline-none focus:ring focus:border-blue-300" />
            <input id="fileInput" type="file" accept="image/*,.pdf" class="p-2 border rounded" />
            <button id="sendButton" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Send</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      const token = localStorage.getItem('token');
      if (!token) {
        alert('No token found. Please log in again.');
        window.location.href = '/login';
      }

      const currentUser = "<%= user %>";
      const currentUserId = "<%= user_id %>";
      let currentRecipientId = null;
      let currentRecipient = null;
      let typingTimeout = null;

      const socket = io('http://localhost:5000', {
        path: '/socket.io',
        auth: { token }
      });

      socket.on('connect', () => {
        console.log('Connected to socket:', socket.id);
        socket.emit('register', currentUserId);
      });

      socket.on('connect_error', err => {
        console.error('Socket connection error:', err.message);
        if (err.message === 'Unauthorized') {
          localStorage.removeItem('token');
          window.location.href = '/login';
        }
      });

      document.querySelectorAll('#contactList li').forEach(li => {
        li.addEventListener('click', () => {
          currentRecipientId = li.dataset.userId;
          currentRecipient = li.dataset.user;
          document.getElementById('chatHeader').innerHTML = `Chatting with <span class="font-semibold">${currentRecipient}</span> <span id="typing-indicator" class="text-sm text-gray-500 ml-2"></span>`;
          document.getElementById('message-input-container').classList.remove('hidden');
          fetchMessages();
        });
      });

      async function fetchMessages() {
        const res = await fetch(`/messages?sender_id=${currentUserId}&receiver_id=${currentRecipientId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });

        const chatBox = document.getElementById('chatBox');
        chatBox.innerHTML = '';

        if (res.ok) {
          const messages = await res.json();
          messages.forEach(displayMessage);
        } else {
          chatBox.innerHTML = `<p class="text-red-500">Failed to load messages.</p>`;
        }
      }

      function displayMessage(msg) {
        const chatBox = document.getElementById('chatBox');
        const isSender = msg.sender_id?.trim().toLowerCase() === currentUserId.trim().toLowerCase();

        const wrapper = document.createElement('div');
        wrapper.className = `flex my-2 ${isSender ? 'justify-end' : 'justify-start'}`;

        const bubble = document.createElement('div');
        bubble.className = `max-w-[70%] p-3 rounded-lg shadow text-sm break-words whitespace-pre-wrap ${isSender ? 'bg-blue-100 text-right rounded-br-none' : 'bg-gray-200 text-gray-900 rounded-bl-none'
          }`;

        const header = document.createElement('div');
        header.className = 'text-xs font-semibold mb-1';
        header.textContent = msg.sender;
        bubble.appendChild(header);

        if (msg.content) {
          const text = document.createElement('div');
          text.textContent = msg.content;
          bubble.appendChild(text);
        }

        if (msg.file_url) {
          const fileLink = document.createElement('a');
          fileLink.href = msg.file_url;
          fileLink.textContent = `ðŸ“Ž ${msg.file_name}`;
          fileLink.target = '_blank';
          fileLink.className = 'block mt-2 underline text-blue-600';
          bubble.appendChild(fileLink);
        }

        // Timestamp
        const timestamp = document.createElement('div');
        const time = new Date(msg.timestamp);
        timestamp.textContent = time.toLocaleString();
        timestamp.className = 'text-[10px] text-gray-500 mt-1';
        bubble.appendChild(timestamp);

        // Read status (for sender only)
        if (isSender) {
          const status = document.createElement('div');
          status.textContent = msg.read_status ? 'âœ“ Read' : 'âœ“ Sent';
          status.className = 'text-[10px] text-blue-500 mt-0.5';
          bubble.appendChild(status);
        }

        wrapper.appendChild(bubble);
        chatBox.appendChild(wrapper);
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Send message
      document.getElementById('sendButton').addEventListener('click', async () => {
        const message = document.getElementById('messageInput').value.trim();
        const file = document.getElementById('fileInput').files[0];
        if (!message && !file) return;

        const formData = new FormData();
        formData.append('sender_id', currentUserId);
        formData.append('receiver_id', currentRecipientId);
        if (message) formData.append('content', message);
        if (file) formData.append('file', file);

        const res = await fetch('/send', {
          method: 'POST',
          headers: { Authorization: `Bearer ${token}` },
          body: formData
        });

        if (res.ok) {
          document.getElementById('messageInput').value = '';
          document.getElementById('fileInput').value = '';
          fetchMessages();
        } else {
          alert('Failed to send message');
        }
      });

      // Typing detection
      const messageInput = document.getElementById('messageInput');
      messageInput.addEventListener('input', () => {
        if (currentRecipientId) {
          socket.emit('typing', { to: currentRecipientId });
        }
      });

      // Typing indicator handler
      socket.on('typing', (fromUserId) => {
        if (fromUserId === currentRecipientId) {
          const indicator = document.getElementById('typing-indicator');
          if (indicator) {
            indicator.textContent = 'typing...';
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
              indicator.textContent = '';
            }, 2000);
          }
        }
      });

      // Enter key shortcut
      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') document.getElementById('sendButton').click();
      });

      // Listen for new messages
      socket.on('privateMessage', () => {
        if (currentRecipientId) fetchMessages();
      });
    </script>

</body>

</html>